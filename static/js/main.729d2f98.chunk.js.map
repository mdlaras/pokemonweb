{"version":3,"sources":["Searchbar.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","searchChange","type","placeholder","onChange","Card","name","pokeurl","useState","pokeorder","pokeorderset","fetch","then","response","json","poki","id","class","alt","src","width","height","CardList","CardComponent","pokemon","map","i","url","App","onSearchChange","event","setState","searchfield","target","value","state","pokis","results","this","filteredpoke","filter","pokey","includes","toLowerCase","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAWeA,G,MATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACZ,OACI,6BACI,2BAAOC,KAAK,SAASC,YAAY,qBAAqBC,SAAUH,O,OCUjEI,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAAa,EACIC,mBAAS,GADb,mBACvBC,EADuB,KACZC,EADY,KAI9B,OAFAC,MAAMJ,GAASK,MAAK,SAAAC,GAAW,OAAOA,EAASC,UAASF,MAAK,SAAAG,GAAOL,EAAaK,EAAKC,OAGlF,yBAAKC,MAAM,+CACP,yBAAKC,IAAK,SAASC,IAAG,mFAA8EV,EAA9E,QAA+FW,MAAM,MAAMC,OAAO,QACxI,gCAAMZ,GACN,4BAAKH,KCIFgB,EAXE,SAAC,GAAe,IACvBC,EADsB,EAAbC,QACeC,KAAI,SAACC,GAC/B,OAAO,kBAAC,EAAD,CAAMpB,KAAQoB,EAAEpB,KAAMC,QAAWmB,EAAEC,SAE9C,OACI,6BACKJ,IC6BEK,E,kDAhCb,aAAc,IAAD,8BACX,gBAWFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAXxC,EAAKC,MAAM,CACTX,QAAS,GACTQ,YAAc,IAJL,E,gEAQO,IAAD,OACjBrB,MAAM,wDAAwDC,MAAK,SAAAC,GAAW,OAAOA,EAASC,UAASF,MAAK,SAAAwB,GAAK,OAAE,EAAKL,SAAS,CAAEP,QAAQY,EAAMC,e,+BAO1I,IAAD,EACyBC,KAAKH,MAA7BX,EADD,EACCA,QAASQ,EADV,EACUA,YACVO,EAAef,EAAQgB,QAAO,SAAAC,GAAU,OAAOA,EAAMnC,KAAKoC,SAASV,EAAYW,kBACrF,OACE,yBAAKC,UAAU,MACb,wBAAI3B,MAAM,eAAV,eACA,kBAAC,EAAD,CAAWhB,aAAgBqC,KAAKT,iBAChC,yBAAKZ,MAAM,OACT,kBAAC,EAAD,CAAUO,QAAWe,U,GAzBbM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.729d2f98.chunk.js","sourcesContent":["import React from 'react'\n\nconst Searchbar = ({searchChange}) => {\n        return(\n            <div>\n                <input type='search' placeholder=\"Enter Pokemon Name\" onChange={searchChange}/>\n            </div>\n            \n        )\n    };\n\nexport default Searchbar","import React, { useState } from 'react'\n\nconst Card = ({name, pokeurl}) => {\n    const [pokeorder, pokeorderset] = useState(0)\n    fetch(pokeurl).then(response=>{return response.json()}).then(poki=>{pokeorderset(poki.id)})\n    \n    return(\n        <div class='bg-silver dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt= 'sprite' src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokeorder}.png`} width='200' height='200'/>\n            <h2>#{pokeorder}</h2>\n            <h1>{name}</h1>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({pokemon}) => {\n    const CardComponent = pokemon.map((i) => {\n        return <Card name = {i.name} pokeurl = {i.url}/>\n    })\n    return (\n        <div>\n            {CardComponent}\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react';\nimport './App.css';\nimport Searchbar from './Searchbar'\nimport CardList from './CardList'\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      pokemon: [],\n      searchfield : ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=493&offset=0').then(response=>{return response.json()}).then(pokis=>this.setState({ pokemon:pokis.results }))\n  }\n  \n  onSearchChange = (event)=>{\n    this.setState({searchfield:event.target.value})\n  }\n\n  render(){\n    const {pokemon, searchfield} = this.state\n    const filteredpoke = pokemon.filter(pokey => {return pokey.name.includes(searchfield.toLowerCase())})\n    return (\n      <div className='tc'>\n        <h1 class='bg-gold pa3'>The Pokedex</h1>\n        <Searchbar searchChange = {this.onSearchChange}/>\n        <div class='pa3'>\n          <CardList pokemon = {filteredpoke}/>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}